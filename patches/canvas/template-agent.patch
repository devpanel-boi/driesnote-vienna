diff --git a/modules/canvas_ai/canvas_ai.links.menu.yml b/modules/canvas_ai/canvas_ai.links.menu.yml
index 3f77b376..82f45338 100644
--- a/modules/canvas_ai/canvas_ai.links.menu.yml
+++ b/modules/canvas_ai/canvas_ai.links.menu.yml
@@ -9,3 +9,7 @@ canvas_ai.setting:
   description: 'Set the max image upload size.'
   parent: ai.admin_settings
   route_name: canvas_ai.setting
+canvas_ai.theme_region_settings:
+  title: Canvas AI Theme Region Settings
+  parent: ai.admin_settings
+  route_name: canvas_ai.theme_region_settings
diff --git a/modules/canvas_ai/canvas_ai.routing.yml b/modules/canvas_ai/canvas_ai.routing.yml
index 9a66bb78..38b9a84b 100644
--- a/modules/canvas_ai/canvas_ai.routing.yml
+++ b/modules/canvas_ai/canvas_ai.routing.yml
@@ -14,7 +14,7 @@ canvas_ai.csrf_token:
     _method: 'POST'

 canvas_ai.component_description_settings:
-  path: '/admin/config/system/canvas-ai-component-description-settings'
+  path: '/admin/config/ai/canvas-ai-component-description-settings'
   defaults:
     _title: 'Canvas AI Component Description Settings Form'
     _form: 'Drupal\canvas_ai\Form\CanvasAiComponentDescriptionSettingsForm'
@@ -26,6 +26,12 @@ canvas_ai.setting:
   defaults:
     _title: 'Canvas AI Settings Form'
     _form: 'Drupal\canvas_ai\Form\CanvasAiSettingsForm'
+
+canvas_ai.theme_region_settings:
+  path: '/admin/config/ai/canvas-ai-theme-region-settings'
+  defaults:
+    _title: 'Canvas AI Theme Region Settings'
+    _form: 'Drupal\canvas_ai\Form\CanvasAIThemeRegionSettingsForm'
   requirements:
     _permission: 'use Drupal Canvas AI'

diff --git a/modules/canvas_ai/config/schema/canvas_ai.schema.yml b/modules/canvas_ai/config/schema/canvas_ai.schema.yml
index 28dd2313..db8a120d 100644
--- a/modules/canvas_ai/config/schema/canvas_ai.schema.yml
+++ b/modules/canvas_ai/config/schema/canvas_ai.schema.yml
@@ -37,3 +37,15 @@ component_source_entry:
     data:
       type: text
       label: 'YAML string of components'
+
+canvas_ai.theme_region.settings:
+  type: config_object
+  label: 'Canvas AI Theme Region Settings'
+  mapping:
+    region_descriptions:
+      type: mapping
+      label: 'Region Descriptions'
+      mapping:
+        '*':
+          type: text
+          label: 'Description'
diff --git a/modules/canvas_ai/src/CanvasAiPageBuilderHelper.php b/modules/canvas_ai/src/CanvasAiPageBuilderHelper.php
index 750788f6..aa83d4a3 100644
--- a/modules/canvas_ai/src/CanvasAiPageBuilderHelper.php
+++ b/modules/canvas_ai/src/CanvasAiPageBuilderHelper.php
@@ -1185,4 +1185,93 @@ class CanvasAiPageBuilderHelper {
     return !empty($node[$slot_name]);
   }

+  /**
+   * Gets the region indices from the current layout.
+   *
+   * @param string $current_layout
+   *   The current layout JSON string.
+   *
+   * @return array
+   *   An array with region names as keys and their nodePathPrefix values.
+   */
+  public function getRegionIndex(string $current_layout): array {
+    $layout_array = Json::decode($current_layout);
+    $regions = [];
+
+    if (isset($layout_array['regions']) && is_array($layout_array['regions'])) {
+      foreach ($layout_array['regions'] as $region_name => $region_data) {
+        if (isset($region_data['nodePathPrefix'])) {
+          $regions[$region_name] = $region_data['nodePathPrefix'][0];
+        }
+      }
+    }
+
+    return $regions;
+  }
+
+  /**
+   * Gets the available regions from the current layout along with their descriptions, if configured.
+   *
+   * @param string $current_layout
+   *   The current layout JSON string.
+   *
+   * @return array
+   *   An array with region names as keys and their nodePathPrefix values and descriptions.
+   */
+  public function getAvailableRegions(string $current_layout) : array {
+    $region_index_mapping = $this->getRegionIndex($current_layout);
+    $region_descriptions = $this->configFactory->get('canvas_ai.theme_region.settings')->get('region_descriptions') ?? [];
+    $available_regions = [];
+    foreach ($region_index_mapping as $region_name => $region_index) {
+      $available_regions[$region_name] = [
+        'nodePathPrefix' => $region_index,
+        'description' => $region_descriptions[$region_name] ?? '',
+      ];
+    }
+    return $available_regions;
+  }
+
+  /**
+   * Processes the parsed YAML array for UI representation.
+   *
+   * This function processes the yml generated by the template generation agent
+   * and converts it into a JSON structure that can be used in the UI.
+   *
+   * @param array $parsed_array
+   *   The parsed YAML array.
+   * @param string $current_layout
+   *   The current layout of the page.
+   * @param array $reference_nodepath
+   *   The nodepath of the reference component, if any.
+   */
+  public function processTemplateYmlForUi(array $parsed_array, string $current_layout, array $reference_nodepath = []): string {
+    $result = [
+      'operations' => [
+        [
+          'operation' => 'ADD',
+          'components' => [],
+        ],
+      ],
+    ];
+    foreach ($parsed_array as $region => $components) {
+      if (!is_array($components)) {
+        continue;
+      }
+
+      // If reference nodepath is given, calculate the nodepath of other components
+      // based on it.
+      if ($reference_nodepath) {
+        $this->processComponentsBelow($components, $reference_nodepath, $result['operations'][0]['components']);
+      }
+      else {
+        $region_index_mapping = $this->getRegionIndex($current_layout);
+
+        $region_index = $region_index_mapping[$region] ?? 0;
+        $this->processComponents($components, [$region_index, 0], $result['operations'][0]['components']);
+      }
+    }
+
+    return Json::encode($result);
+  }
+
 }
diff --git a/modules/canvas_ai/src/Controller/CanvasBuilder.php b/modules/canvas_ai/src/Controller/CanvasBuilder.php
index 3834e0b2..59724fef 100644
--- a/modules/canvas_ai/src/Controller/CanvasBuilder.php
+++ b/modules/canvas_ai/src/Controller/CanvasBuilder.php
@@ -22,9 +22,10 @@ use Drupal\canvas_ai\Plugin\AiFunctionCall\CreateComponent;
 use Drupal\canvas_ai\Plugin\AiFunctionCall\EditComponentJs;
 use Drupal\canvas_ai\Plugin\AiFunctionCall\CreateFieldContent;
 use Drupal\canvas_ai\Plugin\AiFunctionCall\EditFieldContent;
-use Drupal\canvas_ai\Plugin\AiFunctionCall\SetAIGeneratedComponentStructure;
 use Drupal\canvas_ai\CanvasAiPageBuilderHelper;
 use Drupal\canvas_ai\CanvasAiTempStore;
+use Drupal\canvas_ai\Plugin\AiFunctionCall\SetAIGeneratedComponentStructure;
+use Drupal\canvas_ai\Plugin\AiFunctionCall\SetAIGeneratedTemplateData;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\HttpFoundation\JsonResponse;
 use Symfony\Component\HttpFoundation\Request;
@@ -222,7 +223,19 @@ final class CanvasBuilder extends ControllerBase {
     $agent->setCreateDirectly(TRUE);
     $menu_fetch_source = $this->getMenuFetchSource();
     $json_api_module_status = $this->moduleHandler()->moduleExists('jsonapi') ? 'enabled' : 'disabled';
-    $agent->setTokenContexts(['entity_type' => $prompt['entity_type'] ?? NULL, 'entity_id' => $prompt['entity_id'] ?? NULL, 'selected_component' => $prompt['selected_component'] ?? NULL, 'layout' => $prompt['layout'] ?? NULL, 'derived_proptypes' => isset($prompt['derived_proptypes']) ? JSON::encode($prompt['derived_proptypes']) : NULL, 'page_title' => $prompt['page_title'] ?? NULL, 'page_description' => $prompt['page_description'] ?? NULL, 'active_component_uuid' => $prompt['active_component_uuid'] ?? 'None', 'menu_fetch_source' => $menu_fetch_source, 'json_api_module_status' => $json_api_module_status]);
+    $agent->setTokenContexts([
+      'entity_type' => $prompt['entity_type'],
+      'entity_id' => $prompt['entity_id'],
+      'selected_component' => $prompt['selected_component'] ?? NULL,
+      'layout' => $prompt['layout'] ?? NULL,
+      'derived_proptypes' => JSON::encode($prompt['derived_proptypes']) ?? NULL,
+      'available_regions' => JSON::encode($this->canvasAiPageBuilderHelper->getAvailableRegions(Json::encode($prompt['current_layout']))) ?? NULL,
+      'page_title' => $prompt['page_title'],
+      'page_description' => $prompt['page_description'] ?? NULL,
+      'active_component_uuid' => $prompt['active_component_uuid'] ?? 'None',
+      'menu_fetch_source' => $menu_fetch_source,
+      'json_api_module_status' => $json_api_module_status,
+    ]);
     try {
       $solvability = $agent->determineSolvability();
     }
@@ -255,6 +268,7 @@ final class CanvasBuilder extends ControllerBase {
         EditFieldContent:: class => ['refined_text'],
         AddMetadata::class => ['metadata'],
         SetAIGeneratedComponentStructure::class => ['operations'],
+        SetAIGeneratedTemplateData::class => ['operations'],
       ];
       if (!empty($tools)) {
         foreach ($tools as $tool) {
@@ -263,19 +277,18 @@ final class CanvasBuilder extends ControllerBase {
               // @todo Refactor this after https://www.drupal.org/i/3529313 is fixed.
               $output = $tool->getReadableOutput();
               try {
-                $data = Yaml::parse($output);
+                if ($tool instanceof SetAIGeneratedComponentStructure || $tool instanceof SetAIGeneratedTemplateData) {
+                  // The tool output is a JSON string for safer decoding.
+                  $data = Json::decode($output);
+                }
+                else {
+                  // The output is a YAML string.
+                  $data = Yaml::parse($output);
+                }
                 foreach ($keys as $key) {
                   if (!empty($data[$key])) {
                     $response[$key] = $data[$key];
                   }
-                  if ($tool instanceof SetAIGeneratedComponentStructure) {
-                    // The tool output is a JSON string for safer decoding.
-                    $data = Json::decode($output);
-                  }
-                  else {
-                    // The output is a YAML string.
-                    $data = Yaml::parse($output);
-                  }
                 }
               }
               catch (\Throwable) {
@@ -286,7 +299,7 @@ final class CanvasBuilder extends ControllerBase {
           if ($tool instanceof AiAgentWrapper) {
             $response['message'] = $tool->getReadableOutput();
           }
-          if ($tool->getPluginId() === 'ai_agents::ai_agent::canvas_page_builder_agent') {
+          if (in_array($tool->getPluginId(), ['ai_agents::ai_agent::canvas_ai_template_builder_agent', 'ai_agents::ai_agent::canvas_ai_page_builder_agent'])) {
             $this->canvasAiTempStore->deleteData(CanvasAiTempStore::CURRENT_LAYOUT_KEY);
           }
         }
diff --git a/modules/canvas_ai/src/Hook/CanvasAiHooks.php b/modules/canvas_ai/src/Hook/CanvasAiHooks.php
index ab0267e2..21ef1ca6 100644
--- a/modules/canvas_ai/src/Hook/CanvasAiHooks.php
+++ b/modules/canvas_ai/src/Hook/CanvasAiHooks.php
@@ -75,6 +75,10 @@ class CanvasAiHooks {
             'name' => $this->t('JSON API Module status'),
             'description' => $this->t('Returns the status of JSON API module.'),
           ],
+          'available_regions' => [
+            'name' => $this->t('Available Regions'),
+            'description' => $this->t('Returns the available regions.'),
+          ],
         ],
       ],
     ];
@@ -129,6 +133,10 @@ class CanvasAiHooks {
           case 'json_api_module_status':
             $replacements[$original] = $data['json_api_module_status'];
             break;
+
+          case 'available_regions':
+            $replacements[$original] = !empty($data['available_regions']) ? $data['available_regions'] : NULL;
+            break;
         }
       }
     }
new file mode 100644
index 0000000000000000000000000000000000000000..e3ef0e6d4877ae6f58734d26186a39a4fd9b8a7c
--- /dev/null
+++ b/modules/canvas_ai/src/Plugin/AiFunctionCall/SetAIGeneratedTemplateData.php
@@ -0,0 +1,158 @@
+<?php
+
+namespace Drupal\canvas_ai\Plugin\AiFunctionCall;
+
+use Drupal\Core\Plugin\Context\ContextDefinition;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\ai\Attribute\FunctionCall;
+use Drupal\ai\Base\FunctionCallBase;
+use Drupal\ai\Service\FunctionCalling\ExecutableFunctionCallInterface;
+use Drupal\ai\Service\FunctionCalling\FunctionCallInterface;
+use Drupal\ai\Utility\ContextDefinitionNormalizer;
+use Drupal\ai_agents\PluginInterfaces\AiAgentContextInterface;
+use Drupal\Component\Serialization\Json;
+use Drupal\Component\Serialization\Yaml;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\Core\Logger\LoggerChannelFactoryInterface;
+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\canvas_ai\AiResponseValidator;
+use Drupal\canvas_ai\CanvasAiPageBuilderHelper;
+use Drupal\canvas_ai\CanvasAiTempStore;
+
+/**
+ * Function call plugin to set the component structure generated by AI.
+ */
+#[FunctionCall(
+  id: 'canvas_ai:set_template_data',
+  function_name: 'set_template_data',
+  name: 'Set Template Data',
+  description: 'This tool is used to add components across various regions of the page to build the desired templates, headers, or footers. The component structure must be provided in valid YAML format.',
+  group: 'modification_tools',
+  context_definitions: [
+    'component_structure' => new ContextDefinition(
+      data_type: 'string',
+      label: new TranslatableMarkup("Component structure in yml format"),
+      description: new TranslatableMarkup("The component structure to store in YAML format."),
+      required: TRUE,
+    ),
+    'reference_component_nodepath' => new ContextDefinition(
+      data_type: 'string',
+      label: new TranslatableMarkup("The nodePath of the reference component"),
+      description: new TranslatableMarkup("The nodePath of the component after which the generated footer components must be placed."),
+      required: FALSE,
+    ),
+  ],
+)]
+final class SetAIGeneratedTemplateData extends FunctionCallBase implements ExecutableFunctionCallInterface, AiAgentContextInterface {
+
+  /**
+   * The Canvas page builder helper service.
+   *
+   * @var \Drupal\canvas_ai\CanvasAiPageBuilderHelper
+   */
+  protected CanvasAiPageBuilderHelper $pageBuilderHelper;
+
+  /**
+   * The logger factory.
+   *
+   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   */
+  protected LoggerChannelFactoryInterface $loggerFactory;
+
+  /**
+   * The current user.
+   *
+   * @var \Drupal\Core\Session\AccountProxyInterface
+   */
+  protected AccountProxyInterface $currentUser;
+
+  /**
+   * The Canvas AI temp store service.
+   *
+   * @var \Drupal\canvas_ai\CanvasAiTempStore
+   */
+  protected CanvasAiTempStore $tempStore;
+
+  /**
+   * The AI response validator service.
+   *
+   * @var \Drupal\canvas_ai\AiResponseValidator
+   */
+  protected AiResponseValidator $responseValidator;
+
+  /**
+   * Load from dependency injection container.
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition): FunctionCallInterface | static {
+    $instance = new static(
+      $configuration,
+      $plugin_id,
+      $plugin_definition,
+      $container->get('ai.context_definition_normalizer'),
+    );
+    $instance->pageBuilderHelper = $container->get('canvas_ai.page_builder_helper');
+    $instance->loggerFactory = $container->get('logger.factory');
+    $instance->currentUser = $container->get('current_user');
+    $instance->tempStore = $container->get('canvas_ai.tempstore');
+    $instance->responseValidator = $container->get('canvas_ai.response_validator');
+    return $instance;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function execute(): void {
+    // Make sure that the user has the right permissions.
+    if (!$this->currentUser->hasPermission('use experience builder ai')) {
+      throw new \Exception('The current user does not have the right permissions to run this tool.');
+    }
+    try {
+      // Get reference component uuid.
+      $reference_nodepath = !empty($this->getContextValue('reference_component_nodepath')) ? $this->getContextValue('reference_component_nodepath') : [];
+      // Convert the reference nodepath to an array.
+      if (!is_array($reference_nodepath)) {
+        $reference_nodepath = Json::decode($reference_nodepath);
+      }
+      // If reference nodepath is provided, ensure that it is valid by checking
+      // if there are even number of elements.
+      if (!empty($reference_nodepath) && count($reference_nodepath) % 2 !== 0) {
+        throw new \Exception(sprintf('The reference nodepath %s is incomplete and missing elements. Provide the complete nodepath from current layout.', implode(', ', $reference_nodepath)));
+      }
+      $component_structure = $this->getContextValue('component_structure');
+      // Try to decode the YAML structure.
+      try {
+        $component_structure_array = Yaml::decode($component_structure);
+      }
+      catch (\Exception $e) {
+        throw new \Exception('Invalid YAML format provided.');
+      }
+
+      // Validate if regions are correct.
+      $current_layout = $this->tempStore->getData(CanvasAiTempStore::CURRENT_LAYOUT_KEY) ?? '';
+      $layout_regions = $this->pageBuilderHelper->getRegionIndex($current_layout);
+      foreach (array_keys($component_structure_array) as $region) {
+        if (!array_key_exists($region, $layout_regions)) {
+          $available_regions = implode(', ', array_keys($layout_regions));
+          throw new \Exception(sprintf(
+            'Region "%s" does not exist. Available regions are: %s.',
+            $region,
+            $available_regions
+          ));
+        }
+      }
+
+      // Validate the component structure for each region.
+      foreach ($component_structure_array as $components) {
+        $this->responseValidator->validateComponentStructure($components);
+      }
+      // Process the YAML structure for UI representation.
+      $processed_structure = $this->pageBuilderHelper->processTemplateYmlForUi($component_structure_array, $current_layout, $reference_nodepath);
+      $this->setOutput($processed_structure);
+    }
+    catch (\Exception $e) {
+      $this->loggerFactory->get('canvas_ai')->error($e->getMessage());
+      $this->setOutput(sprintf('Failed to save: %s', $e->getMessage()));
+    }
+  }
+
+}

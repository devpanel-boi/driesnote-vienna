diff --git a/modules/canvas_ai/src/CanvasAiPageBuilderHelper.php b/modules/canvas_ai/src/CanvasAiPageBuilderHelper.php
index 750788f6d019225a81d491fb6bc9e0dffd95c134..5b3e8753d6affa9cb44ff13ded9ae4533fad0457 100644
--- a/modules/canvas_ai/src/CanvasAiPageBuilderHelper.php
+++ b/modules/canvas_ai/src/CanvasAiPageBuilderHelper.php
@@ -62,17 +62,33 @@ class CanvasAiPageBuilderHelper {
   public function getComponentContextForAi(): string {
     $component_context = [];
     $component_context_from_config = $this->getComponentContextFromConfig();
-    $available_components = !empty($component_context_from_config) ? $component_context_from_config : $this->getAllComponentsKeyedBySource();
+    $available_components = $this->getAllComponentsKeyedBySource();
+
+    foreach ($component_context_from_config as $components) {
+      foreach ($components as $component_id => $data) {
+        $component_context[$component_id] = $data;
+      }
+    }
+
     foreach ($available_components as $components) {
       // Component info would be under 'components' key, when not loaded from
       // config.
       if (isset($components['components'])) {
-        $component_context += $components['components'];
+        foreach ($components['components'] as $component_id => $data) {
+          // Check if the data differs from the config data.
+          if (isset($component_context[$component_id]) && $component_context[$component_id] !== $data) {
+            // Merge the data, giving preference to the non-config data.
+            $component_context[$component_id] = ($component_context[$component_id] ?? []) + $data;
+          }
+        }
       }
       else {
-        $component_context += $components;
+        foreach ($components as $component_id => $data) {
+          if (isset($component_context[$component_id]) && $component_context[$component_id] !== $data) {
+            $component_context[$component_id] = ($component_context[$component_id] ?? []) + $data;
+          }
+        }
       }
-
     }
     return Yaml::dump($component_context, 4, 2);
   }
@@ -331,6 +347,12 @@ class CanvasAiPageBuilderHelper {
       if ($components['enabled']) {
         $enabled_sources[$source] = Yaml::parse($components['data']);
       }
+      foreach (Yaml::parse($components['data']) as $component_id => $component_data) {
+        // If a component is marked as hidden, remove it from the context.
+        if (isset($component_data['hidden']) && $component_data['hidden']) {
+          unset($enabled_sources[$source][$component_id]);
+        }
+      }
     }

     return $enabled_sources ?? [];
diff --git a/modules/canvas_ai/src/Form/CanvasAiComponentDescriptionSettingsForm.php b/modules/canvas_ai/src/Form/CanvasAiComponentDescriptionSettingsForm.php
index 0d0c90ffcacbe20f22d6a5d1843028794e14161a..5e3eb10a5b7d4f89f084719034d63d38aa9cad55 100644
--- a/modules/canvas_ai/src/Form/CanvasAiComponentDescriptionSettingsForm.php
+++ b/modules/canvas_ai/src/Form/CanvasAiComponentDescriptionSettingsForm.php
@@ -99,6 +99,7 @@ final class CanvasAiComponentDescriptionSettingsForm extends ConfigFormBase {
         if (isset($available_components[$source]['components'][$component_id])) {
           // Replace the component description.
           $available_components[$source]['components'][$component_id]['description'] = $component_data_from_form['description'];
+          $available_components[$source]['components'][$component_id]['hidden'] = $component_data_from_form['hidden'];

           // Replace the props descriptions.
           if (isset($available_components[$source]['components'][$component_id]['props']) && is_array($available_components[$source]['components'][$component_id]['props'])) {
@@ -156,11 +157,20 @@ final class CanvasAiComponentDescriptionSettingsForm extends ConfigFormBase {
           '#title' => $component_data['name'],
         ];

+        $default_values = $this->getDefaultValues($source, $component_id);
+
+        $form[$source]['components'][$component_id]['hidden'] = [
+          '#type' => 'checkbox',
+          '#title' => $this->t('Hide Component for AI'),
+          '#description' => $this->t('If checked, this component will be hidden from the AI and not suggested for use.'),
+          '#default_value' => $default_values['hidden'] ?? FALSE,
+        ];
+
         // Component description element.
         $form[$source]['components'][$component_id]['description'] = [
           '#type' => 'textarea',
           '#title' => $this->t('Description'),
-          '#default_value' => is_null($this->getDefaultValue($source, $component_id)) ? $component_data['description'] : $this->getDefaultValue($source, $component_id),
+          '#default_value' => $default_values['description'] ?? $component_data['description'],
         ];

         // Description elements for each prop.
@@ -172,11 +182,12 @@ final class CanvasAiComponentDescriptionSettingsForm extends ConfigFormBase {
           ];

           foreach ($component_data['props'] as $prop_id => $prop_data) {
+            $prop_values = $this->getDefaultValues($source, $component_id, $prop_id, 'props');
             // @phpstan-ignore-next-line
             $form[$source]['components'][$component_id]['props'][$prop_id]['description'] = [
               '#type' => 'textarea',
               '#title' => $prop_data['name'],
-              '#default_value' => is_null($this->getDefaultValue($source, $component_id, $prop_id, 'props')) ? $prop_data['description'] : $this->getDefaultValue($source, $component_id, $prop_id, 'props'),
+              '#default_value' => $prop_values['description'] ?? $prop_data['description'],
             ];
           }
         }
@@ -189,11 +200,13 @@ final class CanvasAiComponentDescriptionSettingsForm extends ConfigFormBase {
           ];

           foreach ($component_data['slots'] as $slot_id => $slot_data) {
+            $slot_values = $this->getDefaultValues($source, $component_id, $slot_id, 'slots');
+
             // @phpstan-ignore-next-line
             $form[$source]['components'][$component_id]['slots'][$slot_id]['description'] = [
               '#type' => 'textarea',
               '#title' => $slot_data['name'],
-              '#default_value' => is_null($this->getDefaultValue($source, $component_id, $slot_id, 'slots')) ? $slot_data['description'] : $this->getDefaultValue($source, $component_id, $slot_id, 'slots'),
+              '#default_value' => $slot_values['description'] ?? $slot_data['description'],
             ];
           }
         }
@@ -238,24 +251,24 @@ final class CanvasAiComponentDescriptionSettingsForm extends ConfigFormBase {
    * @param string $type
    *   The type: 'props' or 'slots'.
    *
-   * @return string|null
-   *   The default description value for the component, prop, or slot.
+   * @return array|null
+   *   The default data value for the component, prop, or slot.
    */
-  private function getDefaultValue(string $source, string $component_id, string $identifier = '', string $type = ''): ?string {
+  private function getDefaultValues(string $source, string $component_id, string $identifier = '', string $type = ''): ?array {
     $component_context_decoded = $this->getComponentContextData($source);
     if ($component_context_decoded) {
       if ($type && $identifier) {
-        // If type and identifier are provided, return the description for that
+        // If type and identifier are provided, return the data for that
         // specific prop or slot.
-        if (isset($component_context_decoded[$component_id][$type][$identifier]['description'])) {
-          return $component_context_decoded[$component_id][$type][$identifier]['description'];
+        if (isset($component_context_decoded[$component_id][$type][$identifier])) {
+          return $component_context_decoded[$component_id][$type][$identifier];
         }
       }
       else {
-        // If type and identifier are not provided, return the description for
+        // If type and identifier are not provided, return the data for
         // the component.
-        if (isset($component_context_decoded[$component_id]['description'])) {
-          return $component_context_decoded[$component_id]['description'];
+        if (isset($component_context_decoded[$component_id])) {
+          return $component_context_decoded[$component_id];
         }
       }
     }
